buildscript {

	ext {
		kotlinVersion = '1.1.3-2'
		springBootVersion = '1.5.4.RELEASE'
		apacheCommonsLang3Version = '3.6'
		httpClientVersion = '4.5.2'
		thymeleafVersion = '3.0.6.RELEASE'
		thymeleafLayoutDialectVersion = '2.2.2'
		janinoVersion = '3.0.7'

		jaywayRestassuredVersion = '2.9.0'
		mockServerNettyVersion = '3.10.4'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	mavenCentral()
}


ext {
	springCloudVersion = 'Dalston.SR1'
}

dependencies {

	compile('org.springframework.cloud:spring-cloud-starter-sleuth')
	compile('org.springframework.session:spring-session')

	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-data-redis')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')

	// Thymeleaf
	compile("org.thymeleaf:thymeleaf-spring4:${thymeleafVersion}")
	compile("org.thymeleaf:thymeleaf:${thymeleafVersion}")
	compile("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:${thymeleafLayoutDialectVersion}")

	compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

	compile("org.apache.commons:commons-lang3:${apacheCommonsLang3Version}")

	compile("org.apache.httpcomponents:httpclient:${httpClientVersion}")

	// Janino library supports conditional processing and JaninoEventEvaluator in Logback
	compile("org.codehaus.janino:janino:${janinoVersion}")

	runtime('org.springframework.boot:spring-boot-devtools')


	testCompile('org.springframework.boot:spring-boot-starter-test')

	testCompile("com.jayway.restassured:spring-mock-mvc:${jaywayRestassuredVersion}")

	testCompile("org.mock-server:mockserver-netty:${mockServerNettyVersion}")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
